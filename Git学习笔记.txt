代码管理：
  分为集中式和分布式
    集中式：版本库集中放在中央服务器中 
      缺点：必须联网才能工作 并且中央服务器出错，代码全部炸裂 代码冗余不够好
      优点：便于权限管理和控制
    
    分布式：目前的主流方式 比如区块链
      优点：安全 某一个代码管理者出问题 不影响其他管理者

Git分布式管理：
  公司一般都会搭建自己的 git lab 管理平台 用于内部代码管理
  最小权限原则：每人一个账号 并且没有权限查看公司所有的项目 为了防止外泄

  git控制推荐软件：
    powershell： 比原始的 cmd dos窗口更强大 并且支持 Linux 指令 但是界面很丑
    Terminal: 界面美观 功能强大的 dos 窗口 强烈推荐 并且界面支持自定义

Git管理常用操作指令：
  1.安装 git 软件 配置环境变量 让全局终端都支持 git
  2.在需要管理的项目的根目录，通过终端初始化 git init 管理仓库
    非借书不能读也 没有一定代价 我们往往不愿意去做一些事情...
    注意：.git 目录在根目录里默认隐藏 需要手动设置开启才能看到
    对于 .git 目录 里面的所有内容 千万不要动 否则会出大问题
  
  3.常用基本操作：

    git status： 查看项目所有文件的状态 (新增 修改 是否添加到仓库)
    git add .： 将所有的文件添加到仓库当中 只是提交到暂存区 还可以回退到上一次提交前的状态
    git restore fileName: 提交到版本库之前 可以从暂存区取消某个文件操作
    git commit -m "本次提交的描述信息"： 提交到版本库 一旦提交 就无法回退了 
      描述信息的格式：
        "bug fix: 修改了什么bug..."
        "feature：新增了什么功能..."
      注意事项：
        第一次使用 git 提交指令 可能会出现一个提示 'Please tell me who you are'
        需要设置提交者的基本信息 使用如下指令：
          git config --global user.email "you@example.com"
          git config --global user.name "your name"
        然后再次提交即可

    git log: 可以查看当前版本及之前版本的提交信息 带有版本号(哈希值)
      作用：可以通过 已经提交的版本的哈希值 来回退到任何一个版本
      缺陷：回到过去就无法再回来了 只能查看当前版本之前的提交信息
    git reflog: 可查看历史所有版本提交信息，包括版本反复横跳的轨迹
    git reset --hard 版本哈希值: 强行跳跃到某一个版本 从现在跳到过去 从过去恢复到现在

    git diff：通常在 add . 之前 该指令 查看做了哪些修改
      展示信息：
        diff --git a/123.txt b/123.txt  对比的新旧文件
        index e627b2b.... 10064ds...    两个文件的哈希值 相当于指纹 只要两个文件不一样 指纹就不一样
        --- a/123.txt                   a 文件标识
        +++ b/123.txt                   b 文件标识
        @@ -1,2 +1,3 @@                 区块头 展示修改的数量 从哪一行开始变化 变了几行
        +这是新增的内容                   新增内容展示
        -这是消失的内容                   删除内容展示 换行符也算是修改内容

  4.远程仓库：GitHub(国际)/码云 Gitee(国内)

    (1) 首先 注册一个 Git账号 GitHub可能进不去 码云是中文版 操作基本上和GitHub一致

    (2) 找到个人主页 ——> 设置 ——> 安全设置 ——> SSH公钥
          SSH公钥是用于本地仓库和远程仓库代码传输的凭证 属于一种加密传输的方式 为了信息安全而必要的处理
          加密方式：非对称加密 算法复杂度很高 属于数学领域的知识 加密和解密采用毫不相干的方式 安全性更高

    (3) 本地需要创建一对加密和解密的秘钥 用于保证远程通信的安全性
        通过指令：
        ssh-keygen -t rsa -C "邮箱账号"
        这个指令会生成本地加密秘钥和远程解密秘钥 存放在 C:\Users\用户\ .ssh\id_rsa
        .ssh文件夹内有：id_rsa 加密秘钥 id_rsa.pub 解密秘钥
        把 id_rsa.pub 的内容全部复制到远程服务器的 SSH公钥中 完成配对

        到此 本地仓库和远程在线仓库就匹配成功了 就可以进行数据通信了

    (4) 新建远程仓库
        仓库名 ——> 是否公开 ——> 发布语言选择 ——> 模板选择 ——> 开源许可证选择(一般选 MIT)

        至此 就可以通过网站链接访问在想仓库了

    (5) 本地仓库和远程仓库数据通信

        I.关联仓库：
          获取远程仓库地址(SSH链接) ——> 关联到本地仓库
          git remote add origin 远程仓库地址
        II.把本地代码推送到远程仓库：
          git push origin master(分支名) 把代码上传到某个分支
            注意：首次上传 可能会报错 会发生文件冲突
                  远程会创建一个 LICENSE 文件 但本地仓库里不存在 
			            一旦上传 会把 license文件覆盖掉
                  所以远程仓库拒绝了上传请求
            解决方式：把远程仓库的 LICENSE 文件强制拉取到本地 然后再重新 上传
              具体方法：活用百度
              推荐指令：git pull origin master --allow-unrelated-histories 强行拉取远程文件
              之后再执行 git push 命令 就成功上传了 即可在远程仓库看到本地代码了
              并且可以在远程仓库看到本地所有的提交信息
        III.克隆别人的项目：
          可以直接在别人的仓库下载 项目.zip到本地 但是麻烦
          推荐方法：在一个空目录下 执行指令：
            git clone 别人的远程仓库地址
          	就可以拿到别人的仓库内容了

          大企业一般都把GitHub禁掉，因为GitHub是开源网站 任何人都可以访问和获取资源
          在工作中，切忌将公司任何文件上传到任意开源网站...这是职业生死线 千万不要触碰
      
    (6) 分支管理
        主分支：发布给用户使用的版本 每一次提交 都是一次版本迭代 属于大更新
        副分支：内部开发预览版 开发测试使用

        git branch: 展示所有分支 并且显示当前分支是哪一个
        git branch dev: 创建了一个 dev 分支， 这个分支的内容和主分支当前一次提交的状态一致
        git checkout dev: 把当前分支切换为 dev
        git merge dev: 在主分支上执行 则把 dev 分支合并到 主分支
        git branch -d dev: 删除 dev分支

    (7) 远程分支同步
        git checkout master: 切换到主分支
        git push origin master:master: 让远程主分支和本地主分支保持一致
        git push origin dev:dev 把 dev 分支发送到远程上
          但是实际工作中 不可能给你 直接管理主分支和dev分支的权限
          所以 需要发起一个合并请求 让管理员审核通过才可以
          在远程仓库中：pull Requests 发起请求  [工作组-编号] 请求说明...等待审核

    (8) 标签管理(相当于版本的昵称)
        git tag v1.0: 给当前提交的版本设置一个版本号 方便查阅
        git tag v0.8 历史版本号： 给任意历史版本设置版本号
        git show v1.0: 会把指定版本的 diff 信息展示出来
        git tag -a v0.9 版本号 -m "版本描述信息" ：给指定版本添加一些描述信息
        git show v0.9: 就能看到刚才添加的版本信息了 
        git tag -d v1.0: 删除指定版本的标签

        git log --graph: 分支信息图形化 只是美化了一下 log信息 作用不大